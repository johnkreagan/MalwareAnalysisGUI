using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;

namespace MalwareAnalysisGUI
{
    public enum AnalysisEngineToolState
    {
        Default,
        InProgress,
        Complete,
        Error
    }

    abstract class AnalysisEngineTool : INotifyPropertyChanged, IDisposable
    {

        private string description;
        public string Description
        {
            get { return description; }
            set
            {
                description = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string errorDescription;
        public string ErrorDescription
        {
            get { return errorDescription; }
            set
            {
                errorDescription = value;
                NotifyPropertyChanged("ErrorDescription");
            }
        }

        private string result;
        public string Result
        {
            get { return result; }
            set
            {
                result = value;
                NotifyPropertyChanged("Result");
            }
        }


        private AnalysisEngineToolState state;
        public AnalysisEngineToolState State
        {
            get { return state; }
            set
            {
                state = value;
                NotifyPropertyChanged("State");
            }
        }


        public abstract void Analyze(Sample s);

        // boiler-plate
        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void NotifyPropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));
        }


        public abstract void Dispose();

        internal virtual void SaveResults(Sample s)
        {
            //get a file name
            string outputFileName = this.Description + "_Output.txt";

            String outputFilePath = Path.Combine(s.OutputDirectory, outputFileName);

            File.WriteAllText(outputFilePath, this.Result);
        }
    }
}
