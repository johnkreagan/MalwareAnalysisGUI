using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using MalwareAnalysisGUI.Analysis;

namespace MalwareAnalysisGUI
{
    class AnalysisEngine : INotifyPropertyChanged, IDisposable
    {



        public AnalysisEngine(Sample sample)
        {
            this.AnalysisSample = sample;

            this.KillProcessCommand = new RelayCommand(new Action<object>(this.killProcess));
            this.CloseProcessCommand = new RelayCommand(new Action<object>(this.closeProcess));

            this.StaticAnalysisTools = new ObservableCollection<AnalysisEngineTool>()
            {
                new StringsTool(),
                new PEFileTool(),
                //new PEScanTool(),
                //new PEiDTool()
            };

            this.DynamicAnalysisTools = new ObservableCollection<DynamicAnalysisEngineTool>()
            {
                new FakeNetTool(),
                new ProcMonTool(),
                new RegistryAnalysisTool()
            };

            if (Directory.Exists(this.AnalysisSample.OutputDirectory) == false)
            {
                Directory.CreateDirectory(this.AnalysisSample.OutputDirectory);
            }



        }

        private void closeProcess(object obj)
        {
            try
            {
                this.SampleProcess.Close();
            }
            catch (Exception ex)
            {
                
            }
        }

        private void killProcess(object obj)
        {
            try
            {
                this.SampleProcess.Kill();
            }
            catch (Exception ex)
            {

            }
        }


        internal void Analyze()
        {
            foreach (AnalysisEngineTool tool in this.StaticAnalysisTools)
            {
                tool.Analyze(this.AnalysisSample);
                NotifyPropertyChanged("StaticAnalysisTools");
            }
            
        }

        internal void BeginDynamicAnalysis()
        {
            this.ProgressString = "Begining Dynamic Analysis";
            foreach (DynamicAnalysisEngineTool tool in this.DynamicAnalysisTools)
            {
                this.ProgressString = "Intitializing " + tool.Description;
                tool.Initialize(this.AnalysisSample);
            }
            this.ProgressString = "Starting Process...";
            this.StartProcess();

        }

        private void StartProcess()
        {
            SampleProcess = new Process();
            SampleProcess.Exited += SampleProcess_Exited;
            SampleProcess.EnableRaisingEvents = true;
            SampleProcess.StartInfo = new ProcessStartInfo()
            {
                FileName = this.AnalysisSample.FullPath
            };

            SampleProcess.Start();


        }

        void SampleProcess_Exited(object sender, EventArgs e)
        {
            this.ProgressString = "Process Exited. Completing Analysis";
            this.CompleteDynamicAnalysis();
        }


        private static bool didComplete = false;

        private void CompleteDynamicAnalysis()
        {
            didComplete = true;
            if (didComplete)
            {
                foreach (DynamicAnalysisEngineTool tool in this.DynamicAnalysisTools)
                {
                    this.ProgressString = "Completing analysis for tool: " + tool.Description;
                    tool.Analyze(this.AnalysisSample);
                }
                this.ProgressString = "Generating Report";
                this.GenerateReport();
            }
            
        }

        private Process SampleProcess;

        private ObservableCollection<AnalysisEngineTool> staticAnalysisTools;
        public ObservableCollection<AnalysisEngineTool> StaticAnalysisTools
        {
            get { return staticAnalysisTools; }
            set { 
                staticAnalysisTools = value;
                NotifyPropertyChanged("StaticAnalysisTools");
            }
        }

        private ObservableCollection<DynamicAnalysisEngineTool> dynamicAnalysisTools;
        public ObservableCollection<DynamicAnalysisEngineTool> DynamicAnalysisTools
        {
            get { return dynamicAnalysisTools; }
            set
            {
                dynamicAnalysisTools = value;
                NotifyPropertyChanged("DynamicAnalysisTools");
            }
        }

        private Sample analysisSample;
        public Sample AnalysisSample
        {
            get { return analysisSample; }
            set { 
                analysisSample = value;
                NotifyPropertyChanged("AnalysisSample");
            }
        }

        private String progressString;
        public String ProgressString
        {
            get { return progressString; }
            set
            {
                progressString = value;
                NotifyPropertyChanged("ProgressString");
            }
        }

        public void Dispose()
        {
            foreach (AnalysisEngineTool item in this.StaticAnalysisTools)
            {
                item.Dispose();
            }

            foreach (DynamicAnalysisEngineTool item in this.DynamicAnalysisTools)
            {
                item.Dispose();
            }
        }

        internal void GenerateReport()
        {
            
            foreach (AnalysisEngineTool item in this.StaticAnalysisTools)
            {
                this.ProgressString = "Generating Report for tool: " + item.Description;
                item.SaveResults(this.AnalysisSample);
            }

            foreach (DynamicAnalysisEngineTool item in this.DynamicAnalysisTools)
            {
                this.ProgressString = "Generating Report for tool: " + item.Description;
                item.SaveResults(this.AnalysisSample);
            }
            this.ProgressString = "Report Generation Complete!";
        }

        // boiler-plate
        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void NotifyPropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));
        }



        public RelayCommand KillProcessCommand { get; set; }

        public RelayCommand CloseProcessCommand { get; set; }
    }
}
