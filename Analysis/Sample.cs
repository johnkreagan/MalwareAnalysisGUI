using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;

namespace MalwareAnalysisGUI
{
    class Sample : INotifyPropertyChanged
    {

        private string fullPath;
        public string FullPath
        {
            get { return fullPath; }
            set {

                fullPath = value;
                NotifyPropertyChanged("Path");

            }
        }


        private string filename;
        public string FileName
        {
            get { return filename; }
            set
            {

                filename = value;
                NotifyPropertyChanged("FileName");

            }
        }

        private string directory;
        public string Directory
        {
            get { return directory; }
            set
            {

                directory = value;
                NotifyPropertyChanged("Directory");

            }
        }

        private string shaString;
        public string SHAString
        {
            get { return shaString; }
            set
            {

                shaString = value;
                NotifyPropertyChanged("SHAString");

            }
        }

        private string md5String;
        public string MD5String
        {
            get { return md5String; }
            set
            {

                md5String = value;
                NotifyPropertyChanged("MD5String");

            }
        }


        private long size;
        public long Size
        {
            get { return size; }
            set
            {

                size = value;
                NotifyPropertyChanged("Size");

            }
        }

        private DateTime creationDateTime;
        public DateTime CreationDateTime
        {
            get { return creationDateTime; }
            set
            {

                creationDateTime = value;
                NotifyPropertyChanged("CreationDateTime");

            }
        }

        private DateTime lastAccessTime;
        public DateTime LastAccessTime
        {
            get { return lastAccessTime; }
            set
            {

                lastAccessTime = value;
                NotifyPropertyChanged("LastAccessTime");

            }
        }

        private DateTime lastWriteTime;
        public DateTime LastWriteTime
        {
            get { return lastWriteTime; }
            set
            {

                lastWriteTime = value;
                NotifyPropertyChanged("LastWriteTime");

            }
        }

        private string outputDirectory;
        public string OutputDirectory
        {
            get { return outputDirectory; }
            set
            {

                outputDirectory = value;
                NotifyPropertyChanged("OutputDirectory");

            }
        }

        public Sample(string fullPath)
        {
            this.FullPath = fullPath;

            this.OutputDirectory = "Output_" + DateTime.Now.Ticks;
            

            this.GetBasicFileInfo();

            this.GetHashes();

        }


        private void GetBasicFileInfo()
        {
            FileInfo fi = new FileInfo(this.FullPath);

            this.Directory = fi.DirectoryName;

            this.FileName = fi.Name;
            this.Size = fi.Length;
            this.CreationDateTime = fi.CreationTime;
            this.LastAccessTime = fi.LastAccessTime;
            this.LastWriteTime = fi.LastWriteTime;

        }

        private void GetHashes()
        {
            //get the sha and MD5 hashes
            using (FileStream stream = File.OpenRead(this.FullPath))
            {
                //get sha
                SHA1Managed sha = new SHA1Managed();
                byte[] hash = sha.ComputeHash(stream);
                this.SHAString = BitConverter.ToString(hash).Replace("-", String.Empty);

                //necessary?
                Array.Clear(hash, 0 , hash.Length);

                //get MD5
                
                MD5 md = MD5.Create();
                hash = md.ComputeHash(stream);
                this.MD5String = BitConverter.ToString(hash).Replace("-", String.Empty);


            }

        }



        ~Sample()
        {
            this.fullPath = null;
            this.directory = null;
            this.filename = null;
        }


        // boiler-plate
        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void NotifyPropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));
        }

    }
}
