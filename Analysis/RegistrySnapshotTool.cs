using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MalwareAnalysisGUI.Analysis
{

        class RegistryAnalysisTool : DynamicAnalysisEngineTool
        {

            public const string EXEName = @"regedit";


            private Process process;

            private String preRunSnapshotOutputName;

            private String postRunSnapshotOutputName;

            public RegistryAnalysisTool()
            {
                this.Description = "RegistrySnapShot";
            }

            public override void Initialize(Sample s)
            {
                Console.WriteLine(s.FileName);

                process = new Process();

                //create a new output name to easily trap activity
                this.preRunSnapshotOutputName = this.Description + "_PRE_" + DateTime.Now.Ticks.ToString() + ".reg";

                TakeSnapshot(s.OutputDirectory, this.preRunSnapshotOutputName);

                //this.Result = sb.ToString();
            }

            public override void Analyze(Sample s)
            {
                this.postRunSnapshotOutputName = this.Description + "_POST_" + DateTime.Now.Ticks.ToString() + ".reg";

                TakeSnapshot(s.OutputDirectory, this.postRunSnapshotOutputName);
            }

            private void TakeSnapshot(String ouputDirectory, String outputName)
            {
                ProcessStartInfo psi = new ProcessStartInfo();
                psi.Arguments = " /e \"" + Path.Combine(ouputDirectory, outputName) + "\"";
                psi.FileName = EXEName;

                psi.UseShellExecute = false;
                psi.RedirectStandardOutput = true;

                process.StartInfo = psi;
                process.Start();

                process.WaitForExit();
            }

            internal override void SaveResults(Sample s)
            {
                base.SaveResults(s);

                //File.Move(this.preRunSnapshotOutputName, Path.Combine(s.OutputDirectory, this.preRunSnapshotOutputName));
                //File.Move(this.postRunSnapshotOutputName, Path.Combine(s.OutputDirectory, this.postRunSnapshotOutputName));
            }
            

            public override void Dispose()
            {
                
            }
        }
    }
