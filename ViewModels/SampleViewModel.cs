using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;

namespace MalwareAnalysisGUI
{
    class SampleViewModel : INotifyPropertyChanged
    {

        public SampleViewModel()
        {
            this.BeginDynamicAnalysisCommand = new RelayCommand(new Action<object>(this.BeginDynamicAnalysis));
        }

        private void BeginDynamicAnalysis(object obj)
        {
            DynamicAnalysisModularWindow dynamicWindow = new DynamicAnalysisModularWindow();
            dynamicWindow.DataContext = this.AnalysisEngine;
            dynamicWindow.Show();

            dynamicAnalysisWorker.DoWork +=dynamicAnalysisWorker_DoWork;
            dynamicAnalysisWorker.RunWorkerCompleted += dynamicAnalysisWorker_RunWorkerCompleted;

            dynamicAnalysisWorker.RunWorkerAsync();
        }

        void dynamicAnalysisWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            
        }

        private void dynamicAnalysisWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            this.AnalysisEngine.BeginDynamicAnalysis();
        }

        private readonly BackgroundWorker dynamicAnalysisWorker = new BackgroundWorker();

        private readonly BackgroundWorker analysisWorker = new BackgroundWorker();

        public void BeginAnalysis()
        {
            analysisWorker.DoWork += analysisWorker_DoWork;
            analysisWorker.RunWorkerCompleted += analysisWorker_RunWorkerCompleted;

            analysisWorker.RunWorkerAsync();

        }

        void analysisWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            //throw new NotImplementedException();
            NotifyPropertyChanged("");
        }

        void analysisWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            this.AnalysisEngine.Analyze();
        }




        private Sample sample;
        public Sample Sample
        {
            get { return sample; }
            set
            {
                sample = value;
                NotifyPropertyChanged("Sample");
            }
        }

        private AnalysisEngine analysisEngine;
        public AnalysisEngine AnalysisEngine
        {
            get { return analysisEngine; }
            set
            {
                analysisEngine = value;
                NotifyPropertyChanged("AnalysisEngine");
            }
        }

        // boiler-plate
        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void NotifyPropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));
        }

        public RelayCommand BeginDynamicAnalysisCommand { get; set; }
    }
}
